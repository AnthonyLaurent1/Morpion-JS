
================================================================================
File: .github\CODEOWNERS
Size: 18 B
================================================================================

* @AnthonyLaurent1

================================================================================
File: index.html
Size: 474 B
================================================================================

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accueil</title>
    <link rel="stylesheet" href="../style/style.css">
</head>
<body>
  <main class="container">
    <h1>Accueil</h1>
    <div class="board-wrapper">
      <div id="board" class="board"></div>
    </div>
  </main>

    <button><a href="./page/jeu.html">joue-ici</button>
</body>
</html>


================================================================================
File: index.js
Size: 3.85 kB
================================================================================

const boardEl = document.getElementById('board');
const statusEl = document.getElementById('status');
const playerEl = document.getElementById('player');
const restartBtn = document.getElementById('restart');

const size = 5;          
const winLen = 3;         
const players = ['X', 'O', '‚ñ≤', '‚ñ†'];
const playerColors = {
  'X': '#e74c3c',
  'O': '#3498db',
  '‚ñ≤': '#16a34a',
  '‚ñ†': '#f59e0b'
};

// √©tat du jeu
let board = Array(size * size).fill(null);
let currentIndex = 0;
let current = players[currentIndex];
let running = true;
let wins = generateWins();

function initBoardDOM() {
  boardEl.innerHTML = '';
  boardEl.style.gridTemplateColumns = `repeat(${size}, 1fr)`;
  for (let i = 0; i < size * size; i++) {
    const cell = document.createElement('div');
    cell.className = 'cell';
    cell.dataset.index = i;
    boardEl.appendChild(cell);
  }
}

function generateWins() {
  const combos = [];
  for (let r = 0; r < size; r++) {
    for (let c = 0; c < size; c++) {
      // horizontale
      if (c + winLen <= size) {
        const combo = [];
        for (let k = 0; k < winLen; k++) combo.push(r * size + (c + k));
        combos.push(combo);
      }
      // verticale
      if (r + winLen <= size) {
        const combo = [];
        for (let k = 0; k < winLen; k++) combo.push((r + k) * size + c);
        combos.push(combo);
      }
      // diagonale ‚Üò
      if (r + winLen <= size && c + winLen <= size) {
        const combo = [];
        for (let k = 0; k < winLen; k++) combo.push((r + k) * size + (c + k));
        combos.push(combo);
      }
      // diagonale ‚Üó
      if (r - winLen + 1 >= 0 && c + winLen <= size) {
        const combo = [];
        for (let k = 0; k < winLen; k++) combo.push((r - k) * size + (c + k));
        combos.push(combo);
      }
    }
  }
  return combos;
}

function render() {
  const cells = Array.from(document.querySelectorAll('.cell'));
  cells.forEach((cell, i) => {
    cell.textContent = board[i] ?? '';
    cell.classList.toggle('disabled', !running || board[i]);
    cell.style.color = board[i] ? playerColors[board[i]] : '';
    cell.classList.remove('win');
  });

  statusEl.textContent = running
    ? 'Tour de : '
    : statusEl.textContent;
  if (running) {
    const playerSpan = document.createElement('strong');
    playerSpan.id = 'player';
    playerSpan.textContent = current;
    playerSpan.style.color = playerColors[current];
    statusEl.appendChild(playerSpan);
  }
}

function checkWin() {
  for (const combo of wins) {
    const first = board[combo[0]];
    if (!first) continue;
    if (combo.every(i => board[i] === first)) return { winner: first, combo };
  }
  if (board.every(Boolean)) return { tie: true };
  return null;
}

function handleClick(e) {
  const cell = e.target.closest('.cell');
  if (!cell || !running) return;
  const idx = Number(cell.dataset.index);
  if (board[idx]) return;

  board[idx] = current;
  const result = checkWin();

  if (result) {
    running = false;
    if (result.winner) {
      statusEl.textContent = `üéâ Le joueur ${result.winner} a gagn√© !`;
      result.combo.forEach(i => {
        const el = document.querySelector(`.cell[data-index='${i}']`);
        if (el) el.classList.add('win');
      });
    } else if (result.tie) {
      statusEl.textContent = 'ü§ù Match nul !';
    }
  } else {
    currentIndex = (currentIndex + 1) % players.length;
    current = players[currentIndex];
  }

  render();
}

function reset() {
  board.fill(null);
  currentIndex = 0;
  current = players[currentIndex];
  running = true;
  render();
}

// init
initBoardDOM();
render();
boardEl.addEventListener('click', handleClick);
restartBtn.addEventListener('click', reset);


================================================================================
File: page\jeu.html
Size: 657 B
================================================================================

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Morpion 4 Joueurs</title>
  <link rel="stylesheet" href="../style/jeu.css">
</head>
<body>
  <main class="container">
    <h1>Morpion 4 Joueurs</h1>

    <div class="board-wrapper">
      <div id="board" class="board"></div>
    </div>

    <div class="info">
      <p id="status">Tour de : <strong id="player">X</strong></p>
      <button id="restart">Recommencer</button>
    </div>
  </main>
  <a href="../index.html">ici</a>

  <script src="../index.js"></script>
</body>
</html>


================================================================================
File: README.md
Size: 2 B
================================================================================




================================================================================
File: style\jeu.css
Size: 1.93 kB
================================================================================

:root {
  --bg: #f0f4f8;
  --board: #ffffff;
  --accent: #4f46e5;
  --cell-border: #d1d5db;
  --cell-hover: #e0e7ff;
  --text: #1f2937;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
  font-family: system-ui, sans-serif;
  background: var(--bg);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
}

.container {
  width: 90vw;
  max-width: 600px;
  text-align: center;
}

h1 {
  margin-bottom: 15px;
  color: var(--accent);
  font-size: 1.5rem;
}

.board-wrapper {
  width: 100%;
  max-width: 550px;
  margin: 0 auto;
  background: var(--board);
  border-radius: 12px;
  box-shadow: 0 8px 18px rgba(0, 0, 0, 0.08);
  padding: 10px;
  overflow: hidden;
}

.board {
  display: grid;
  grid-template-columns: repeat(9, 1fr);
  gap: 5px;
}

.cell {
  aspect-ratio: 1/1;
  background: #fff;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.4rem;
  font-weight: 800;
  cursor: pointer;
  border: 2px solid var(--cell-border);
  border-radius: 6px;
  transition: 0.12s;
  user-select: none;
}

.cell:hover:not(.disabled) {
  background: var(--cell-hover);
  transform: scale(1.05);
}

.cell.disabled {
  pointer-events: none;
  opacity: 0.8;
}

.cell.win {
  background: linear-gradient(90deg, rgba(79, 70, 229, 0.1), rgba(79, 70, 229, 0.05));
  border-color: var(--accent);
  box-shadow: 0 4px 10px rgba(79, 70, 229, 0.2);
}

.info {
  margin-top: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

button {
  padding: 8px 14px;
  border: none;
  background: var(--accent);
  color: #fff;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  transition: 0.15s;
}

button:hover {
  opacity: 0.95;
}

#status {
  font-size: 1.05rem;
}

#player {
  font-weight: 900;
}


================================================================================
File: styles.css
Size: 0 B
================================================================================


